import numpy as np
from matplotlib import pyplot as plt

plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

D=0.4
u=0.8
t_init=0
t_stop=4
Nt=80
x_left=0
x_right=10
Nx=240

fig, ax = plt.subplots(3, 2, figsize=(10, 10))
ax = ax.ravel()
fig.set_tight_layout(True)

def pulse(x,t):
    p=np.exp(-(x - 5.5 - u*t) ** 2 / D) \
           + np.heaviside(x - 1 - u *t, 0.5) * np.heaviside(-(x - 2 - u * t), 0.5) \
           + np.minimum(np.maximum(x - 3 - u * t, 0), np.maximum(-(x - 4 - u * t), 0)) * 2
    return p

def init_num(x): #初始化
    return pulse(x,t=t_init)

x_grid=np.linspace(x_left,x_right,Nx+1) #x网格
t_grid=np.linspace(t_init,t_stop,Nt+1) #t网格
dx=x_grid[1]-x_grid[0] #空间步长
dt=t_grid[1]-t_grid[0] #时间步长
r=u*dt/dx #CFL数，0<r<1
print(f"CFL数: {r:.3f}")

schemes=['unstable', 'upwind', 'leapfrog', 'lax_friedrichs',
           'lax_wendroff', 'beam_warming']
t_table_result=[]

for idx,scheme in enumerate(schemes):
    t_table=np.zeros((len(t_grid),len(x_grid)))
    t_table[0,:]=init_num(x_grid)

    if scheme=='upwind':#迎风
        for n in range(len(t_table)-1):
            for i in range(1, len(x_grid)):
                t_table[n+1,i]=(1-r)*t_table[n,i]+r*t_table[n,i-1]
            t_table[n + 1, 0] = pulse(x_grid[0], dt * n)

    elif scheme=='leapfrog': #蛙跳
        for i in range(1, len(x_grid)):
            t_table[1, i] = (1 - r) * t_table[0, i] + r * t_table[0, i - 1]
        t_table[1, 0] = pulse(x_grid[0], dt)

        for n in range(1,len(t_table)-1):
            for i in range(1,len(x_grid)-1):
                t_table[n + 1, i] = t_table[n - 1, i] - r * (t_table[n, i + 1] - t_table[n, i - 1])
            t_table[n+1,0]=pulse(x_grid[0],dt*n)
            t_table[n+1,-1]=pulse(x_grid[-1],dt*n)

    elif scheme=='lax_friedrichs':
        for n in range(len(t_table)-1):
            for i in range(1,len(x_grid)-1):
                t_table[n + 1, i] = 0.5 * (t_table[n, i + 1] + t_table[n, i - 1]) - 0.5 * r * (
                            t_table[n, i + 1] - t_table[n, i - 1])
            t_table[n+1,0]=pulse(x_grid[0],dt*n)
            t_table[n + 1, -1] = pulse(x_grid[-1],dt * n)

    elif scheme=='lax_wendroff':
        for n in range(len(t_table)-1):
            for i in range(1,len(x_grid)-1):
                t_table[n + 1, i] = t_table[n, i] - 0.5 * r * (t_table[n, i + 1] - t_table[n, i - 1]) + 0.5 * r ** 2 * (
                            t_table[n, i + 1] - 2 * t_table[n, i] + t_table[n, i - 1])
            t_table[n + 1, 0] = pulse(x_grid[0],dt * n)
            t_table[n + 1, -1] = pulse(x_grid[-1],dt *n)

    elif scheme=='beam_warming':
        for n in range(len(t_table)-1):
            for i in range(2,len(x_grid)-1):
                t_table[n + 1, i] = t_table[n, i] - 0.5 * r * (
                            3 * t_table[n, i] - 4 * t_table[n, i - 1] + t_table[n, i - 2]) + 0.5 * r ** 2 * (
                                                t_table[n, i] - 2 * t_table[n, i - 1] + t_table[n, i - 2])
            t_table[n + 1, 0] = pulse(x_grid[0],dt * n)
            t_table[n + 1, 1] = pulse(x_grid[1],dt * n)

    else:
        for n in range(len(t_table)-1):
            for i in range(1,len(x_grid)-1):
                t_table[n + 1, i] = t_table[n, i] - 0.5 * r * (t_table[n, i + 1] - t_table[n, i - 1])
            t_table[n + 1, 0] = pulse(x_grid[0],dt * n)
            t_table[n + 1, -1] = pulse(x_grid[-1],dt * n)

    t_table_result.append(t_table)

idx_frame=Nt

def update(idx_frame):
    for idx, t_table in enumerate(t_table_result):
        ax[idx].clear()
        ax[idx].plot(x_grid, t_table[idx_frame, :], linewidth=2, label='数值解')
        ax[idx].plot(x_grid, pulse(x=x_grid, t=idx_frame * dt + t_init), '--', linewidth=1.5, label='精确解')
        ax[idx].set_xlim([-0.5, 10.5])
        ax[idx].set_ylim([-0.4, 1.3])
        ax[idx].set_title(schemes[idx])
        ax[idx].grid(True, alpha=0.3)
        if idx == 0:
            ax[idx].legend()
update(idx_frame)
plt.tight_layout()
plt.show()
